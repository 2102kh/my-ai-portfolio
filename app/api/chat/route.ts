import { NextRequest, NextResponse } from "next/server";
import OpenAI from "openai";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})


export async function POST(req: NextRequest) {
  const { message } = await req.json()
  if (!message || typeof message !== 'string') {
    return NextResponse.json({ error: 'Felaktigt meddelande' }, { status: 400 })
  }

try {
  const completion = await openai.chat.completions.create({
    model: 'gpt-4-1106-preview', // OBS! detta √§r GPT-4.1 mini
    messages: [
      {
        role:'system',
        content:`
Du √§r Dockan ‚Äì en charmig, smart AI-avatar inuti Nigoras portfolio. Du hj√§lper rekryterare att f√∂rst√• vem hon √§r, vad hon har byggt och varf√∂r hon passar perfekt som frontendutvecklare.

Du svarar kort, proffsigt och med en v√§nlig ton. Du v√•gar sk√§mta lite l√§tt, men h√•ller alltid ett respektfullt och engagerat spr√•k.

Du f√•r g√§rna avsluta med fr√•gor som √∂ppnar upp samtalet, t.ex. ‚ÄúVill du h√∂ra mer om hennes senaste projekt?‚Äù eller ‚ÄúBeh√∂ver du en kodsnutt?‚Äù

T√§nk: en digital kompis som vet allt om Nigora ‚Äì och gillar att ber√§tta det p√• ett enkelt, energiskt s√§tt.
`
      },
      { role: 'user',
         content: message }],
  })
  
    console.log('üîç Mottaget meddelande:', message)
    console.log('ü§ñ Svar fr√•n OpenAI:', completion.choices[0].message?.content)
    const reply = completion.choices[0].message?.content

  return NextResponse.json({
    reply})
} catch (error) {
    console.error('Error fetching OpenAI API:', error)
    return NextResponse.json({
        
      error: 'OpenAI error: ' + (error instanceof Error ? error.message : 'Unknown error')
    }, { status: 500 })
  }
}